package com.akshaydixit.smscopy;

import android.annotation.SuppressLint;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;

import android.app.Application;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import android.Manifest;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.widget.Toast;
import android.support.v4.content.ContextCompat;
//import androidx.core.content.ContextCompat;

//import androidx.annotation.NonNull;
//import androidx.appcompat.app.AppCompatActivity;
//import androidx.core.app.ActivityCompat;
//import androidx.core.content.ContextCompat;


public class MainActivity extends AppCompatActivity {

    Intent intent = new Intent(ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION, Uri.parse("package:" + BuildConfig.APPLICATION_ID));

    final static int APP_STORAGE_ACCESS_REQUEST_CODE = 501; // Any value
    private static final int READ_SMS_PERMISSION_REQUEST_CODE = 1;
    private static final int MANAGE_STORAGE_PERMISSION_REQUEST_CODE = 2;
    public static final String ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
//        backupSMS();
        // Check if permission is already granted
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if ((checkSelfPermission(Manifest.permission.READ_SMS) != PackageManager.PERMISSION_GRANTED) ){
                // Request the permission
                requestPermissions(new String[]{Manifest.permission.READ_SMS}, READ_SMS_PERMISSION_REQUEST_CODE);
            } else {
                if (!Environment.isExternalStorageManager()) {

                    // Request the permission
                    startActivityForResult(intent, APP_STORAGE_ACCESS_REQUEST_CODE);
                } else {
                    // Permission is granted, proceed with reading SMS
                    System.out.println("Requesting permission to access storage");
                    backupSMS();
                }
            }
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if(requestCode == APP_STORAGE_ACCESS_REQUEST_CODE && Environment.isExternalStorageManager()){
                backupSMS();
            }
        }
        // Permission granted. Now resume your workflow.
    }

    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == READ_SMS_PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 &&
                    grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted
                backupSMS();
            } else {
                // Permission denied
                Toast.makeText(this, "Permission denied to read SMS", Toast.LENGTH_SHORT).show();
            }
        }
        if (requestCode == MANAGE_STORAGE_PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 &&
                    grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted
                backupSMS();
            } else {
                // Permission denied
                Toast.makeText(this, "Permission denied to manage storage", Toast.LENGTH_SHORT).show();
            }
        }
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);

    }

// SMS copy code begins:
//--------------------
public ArrayList<String> smsBuffer = new ArrayList<String>();
    String smsFile = "SMS"+".csv";
    private void  backupSMS(){
        smsBuffer.clear();
        Uri mSmsinboxQueryUri = Uri.parse("content://sms");
        Cursor cursor1 = getContentResolver().query(
                mSmsinboxQueryUri,
                new String[] { "_id", "thread_id", "address", "person", "date",
                        "body", "type" }, null, null, null);
        //startManagingCursor(cursor1);
        String[] columns = new String[] { "_id", "thread_id", "address", "person", "date", "body",
                "type" };
        if (cursor1.getCount() > 0) {
            String count = Integer.toString(cursor1.getCount());
            Log.d("Count", count);
            while (cursor1.moveToNext()) {

                @SuppressLint("Range") String messageId = cursor1.getString(cursor1.getColumnIndex(columns[0]));

                @SuppressLint("Range") String threadId = cursor1.getString(cursor1
                        .getColumnIndex(columns[1]));

                @SuppressLint("Range") String address = cursor1.getString(cursor1
                        .getColumnIndex(columns[2]));
                @SuppressLint("Range") String name = cursor1.getString(cursor1
                        .getColumnIndex(columns[3]));
                @SuppressLint("Range") String date = cursor1.getString(cursor1
                        .getColumnIndex(columns[4]));
                @SuppressLint("Range") String msg = cursor1.getString(cursor1
                        .getColumnIndex(columns[5]));
                @SuppressLint("Range") String type = cursor1.getString(cursor1
                        .getColumnIndex(columns[6]));



                smsBuffer.add(messageId + ","+ threadId+ ","+ address + "," + name + "," + date + " ," + msg + " ,"
                        + type);

            }
            generateCSVFileForSMS(smsBuffer);

        }
    }


    private void generateCSVFileForSMS(ArrayList<String> list)
    {
        try
        {
            String storage_path = Environment.getExternalStorageDirectory().toString() + File.separator + smsFile;
            System.out.println("Balle!!!!!!");
            FileWriter write = new FileWriter(storage_path);
            write.append("messageId, threadId, Address, Name, Date, msg, type");
            write.append('\n');
            for (String s : list)
            {
                write.append(s);
                write.append('\n');
            }
            write.flush();
            write.close();
        }
        catch (NullPointerException e)
        {
            System.out.println("Nullpointer Exception "+e);
            //  e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

    }
// SMS Code ends
// -------------

}
